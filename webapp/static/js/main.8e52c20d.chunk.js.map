{"version":3,"sources":["config.js","pages/Login/index.js","components/PageLoading/index.js","pages/Dashboard/index.js","pages/NotFound/index.js","Routes.js","App.js","index.js"],"names":["appConfig","config","this","configs","fetch","appurl","method","body","JSON","stringify","email","localStorage","getItem","salt","headers","logado","json","dadosUsuario","acls","rule","auth","length","i","codigo_recurso","push","Login","props","handleChange","event","setState","target","name","value","handleSubmit","a","preventDefault","checkValidity","setValidated","token","enc2","randomstring","generate","Date","now","toString","setItem","state","dataLogin","password","then","response","setToast","messageToast","size","color","classToast","error","ReactHtmlParser","message","logged","console","log","nome","handleRecSenhaSubmit","setRecValidated","dataRec","email_recuperacao","alertMessageStatus","alertMessage","alertType","setTimeout","openFormRecSenha","action","openFormRecSenhaAction","closeToast","closeAlertMessage","bind","Config","to","Toast","onClose","show","delay","autohide","className","Header","Body","images","duration","transition","onSubmit","noValidate","src","alt","width","height","type","onChange","placeholder","required","Form","Control","Feedback","id","href","onClick","getFullYear","rel","Modal","onHide","backdrop","keyboard","closeButton","Title","e","Alert","variant","dismissible","Row","Col","Group","Label","Button","block","Footer","React","Component","PageLoading","Dashboard","clear","callback","content","title","frameBorder","allowtransparency","scrolling","Navbar","bg","Brand","Routes","component","LoginPage","exact","path","DashboardPage","NotFoundPage","browserHistory","createBrowserHistory","App","history","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e52c20d.chunk.js","sourcesContent":["class AppConf{\r\n\r\n    configs(){\r\n        const variables = {\r\n            //\"appurl\":\"http://localhost:6050/\"\r\n            \"appurl\":\"http://107.180.106.82:6010/\"\r\n        }\r\n        return variables;\r\n    }\r\n\r\n    async session(){\r\n        let config = this.configs();\r\n\r\n        let logado = await fetch(config.appurl+\"geoportal/logged\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({email:localStorage.getItem('email'), salt:localStorage.getItem('salt')}),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        let dadosUsuario = await logado.json();\r\n\r\n        if(dadosUsuario){\r\n            return dadosUsuario;\r\n        }else{\r\n            return [];\r\n        }\r\n    }\r\n\r\n    auth(acls,rule){\r\n        let auth = [];\r\n        if(acls.length > 0){\r\n            for(let i = 0; i < acls.length; i++){\r\n                if(rule === acls[i].codigo_recurso){\r\n                    auth.push(acls[i].codigo_recurso)\r\n                }\r\n            }\r\n        }\r\n        return auth;\r\n    }\r\n   \r\n}\r\n  \r\n  const appConfig = new AppConf();\r\n  export default appConfig;","import React from 'react';\r\nimport {Form, Button, Col, Modal, Alert, Toast}  from \"react-bootstrap\";\r\nimport ClipLoader from \"react-spinners/BarLoader\";\r\nimport BackgroundSlider from 'react-background-slider';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport randomstring from \"randomstring\";\r\nimport enc2 from \"crypto-js/sha256\"\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport Config from '../../config';\r\nimport './style.css';\r\n\r\nclass Login extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    this.state = {\r\n      logged:false,\r\n      setToast:false,\r\n      messageToast:'',\r\n      classToast:'',\r\n      setValidated:false,\r\n      setRecValidated:false,\r\n      email: '',\r\n      password: '',\r\n\r\n      openFormRecSenhaAction:false,\r\n      alertType:'primary',\r\n      alertMessageStatus:false,\r\n      alertMessage:'',\r\n    };\r\n\r\n    //Configuracoes\r\n    this.config = Config.configs()\r\n\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState(\r\n      {\r\n        [event.target.name]: event.target.value\r\n      }\r\n    );\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!event.target.checkValidity()) {\r\n      // form is invalid! so we show error messages\r\n      this.setState({ setValidated: true });\r\n      return;\r\n    }\r\n    // form is valid! We can parse and submit data\r\n    this.setState({ setValidated: false });\r\n\r\n    //const data = new FormData(event.target);\r\n    let token = enc2(randomstring.generate() + Date.now()).toString()\r\n    localStorage.setItem('email', this.state.email);\r\n    localStorage.setItem('salt', token);\r\n\r\n    const dataLogin = {\r\n      email:this.state.email, //data.get('email'),\r\n      password:this.state.password, //data.get('password')\r\n      salt:token\r\n    }\r\n\r\n    fetch(this.config.appurl+\"geoportal/dologin\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(dataLogin),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(\r\n      //loading\r\n      this.setState(\r\n        {\r\n          setToast: true,\r\n          messageToast:<ClipLoader size={28} color={\"#2a3850\"} />,\r\n          classToast:'toastMsg alert alert-primary'\r\n        }\r\n      )\r\n    )\r\n    .then(\r\n      (response) => {\r\n        if(response.error){\r\n          this.setState(\r\n            {\r\n              setToast: true,\r\n              messageToast: ReactHtmlParser(response.message),\r\n              classToast:'toastMsg alert alert-danger'\r\n            }\r\n          );\r\n        }else{\r\n          this.setState(\r\n            {\r\n              setToast: true,\r\n              messageToast:<span>{ReactHtmlParser(response.message)} <br/><br/> <ClipLoader size={28} color={\"green\"}/></span> ,\r\n              classToast:'toastMsg alert alert-success',\r\n              logged:true\r\n            }\r\n          );\r\n          //Exibir o nome do usuário\r\n          console.log(response)\r\n          localStorage.setItem('nome', response.nome);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.log(error)\r\n        this.setState({\r\n          setToast: true,\r\n          messageToast:\"Ocorreu um erro: \"+error,\r\n          classToast:'toastMsg alert alert-danger'\r\n        });\r\n      }\r\n    )\r\n\r\n    //const responseLogin = await sendLogin.json();\r\n\r\n  }\r\n\r\n  handleRecSenhaSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!event.target.checkValidity()) {\r\n      // form is invalid! so we show error messages\r\n      this.setState({ setRecValidated: true });\r\n      return;\r\n    }\r\n    // form is valid! We can parse and submit data\r\n    this.setState({ setRecValidated: false });\r\n\r\n    const dataRec = {\r\n      email_recuperacao:this.state.email_recuperacao\r\n    }\r\n\r\n    fetch(this.config.appurl+\"admin/usuarios/recuperarsenha\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(dataRec),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(\r\n      //loading\r\n      this.setState(\r\n        {\r\n          alertMessageStatus: true,\r\n          alertMessage:<ClipLoader size={28} color={\"#2a3850\"} />,\r\n          alertType:'primary'\r\n        }\r\n      )\r\n    )\r\n    .then(\r\n      (response) => {\r\n        if(response.error){\r\n          this.setState(\r\n            {\r\n              alertMessageStatus: true,\r\n              alertMessage:ReactHtmlParser(response.message),\r\n              alertType:'danger'\r\n            }\r\n          );\r\n        }else{\r\n          this.setState(\r\n            {\r\n              alertMessageStatus: true,\r\n              alertMessage:ReactHtmlParser(response.message),\r\n              alertType:'success'\r\n            }\r\n          );\r\n          setTimeout(() => {\r\n            this.setState({alertMessageStatus:false})\r\n          }, 3000);\r\n        }\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          alertMessageStatus: true,\r\n          alertMessage:\"Ops aconteceu um erro na operação: \"+error,\r\n          alertType:'danger'\r\n        });\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  openFormRecSenha = (action) =>{\r\n    this.setState({ openFormRecSenhaAction: action })\r\n  }\r\n\r\n  closeToast = () => {\r\n    this.setState(\r\n      {\r\n        setToast: false\r\n      }\r\n    );\r\n  }\r\n\r\n  closeAlertMessage = () => {\r\n    this.setState(\r\n      {\r\n        alertMessageStatus: false\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    \r\n    if(this.state.logged){\r\n      return (\r\n        <Redirect push to=\"/app\" />\r\n      )\r\n    }else{\r\n     \r\n      return (\r\n        <>\r\n          <Toast onClose={() => this.closeToast()} show={this.state.setToast} delay={5000} autohide className={this.state.classToast} >\r\n            <Toast.Header>\r\n              <strong className=\"mr-auto\">Mensagem</strong>\r\n            </Toast.Header>\r\n            <Toast.Body><strong>{this.state.messageToast} </strong></Toast.Body>\r\n          </Toast>\r\n          \r\n          <BackgroundSlider images={[\"/sjr3.jpg\", \"/sjr1.jpg\"]} duration={5} transition={2} />\r\n  \r\n          <section className=\"container-fluid p-2\">\r\n            <form onSubmit={this.handleSubmit} noValidate className={this.state.setValidated ? 'form-signin text-center is-invalid was-validated form-control:invalid' : 'form-signin text-center'}>\r\n              <img \r\n                src=\"/logo.png\" \r\n                alt=\"Logo SJR\"\r\n                width=\"111\"\r\n                height=\"164\"\r\n                className=\"mb-4 d-inline-block align-center\"\r\n              />\r\n              <h2 className=\"h3 mb-3 font-weight-normal\">Geoportal de ITBI</h2>\r\n              \r\n              <input type=\"email\" className=\"form-control\" name=\"email\" value={this.state.value} onChange={this.handleChange} placeholder=\"Email do Usuário\" required />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Por favor insira um email válido\r\n              </Form.Control.Feedback>\r\n              \r\n              <input type=\"password\" id=\"inputPassword\" className=\"form-control\" name=\"password\" value={this.state.value} onChange={this.handleChange} placeholder=\"Senha do Usuário\" required />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Insira sua senha de usuário\r\n              </Form.Control.Feedback>\r\n\r\n              <hr/>\r\n              <div className=\"checkbox mb-3 mt-1\">\r\n                  <p>\r\n                    <a className=\"text-blue\" href=\"#per\" onClick={() => this.openFormRecSenha(!this.state.openFormRecSenhaAction)}>Pedeu a senha?</a>\r\n                  </p>\r\n              </div>\r\n              <button className=\"btn btn-lg btn-danger btn-block\" type=\"submit\">Acessar</button>\r\n              <hr/>\r\n              <p>&copy; {new Date().getFullYear()} - Prefeitura Municipal de São José de Ribamar |\r\n                  <a href=\"http://tecgeobr.com.br\" rel=\"noopener noreferrer\" target=\"_blank\"> Desenvolvimento Tecgeo</a>.\r\n              </p>\r\n            </form>\r\n          </section>\r\n\r\n          <Modal\r\n            show={this.state.openFormRecSenhaAction}\r\n            onHide={() => this.openFormRecSenha(!this.state.openFormRecSenhaAction)}\r\n            backdrop=\"static\"\r\n            keyboard={true}\r\n            >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Recuperar Senha</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Form onSubmit={e => this.handleRecSenhaSubmit(e)} noValidate className={this.state.setRecValidated ? 'is-invalid was-validated form-control:invalid' : ''}>\r\n               \r\n                <Alert variant={this.state.alertType} show={this.state.alertMessageStatus} onClose={() => this.closeAlertMessage()} dismissible>\r\n                  {this.state.alertMessage}\r\n                </Alert>\r\n\r\n                <Form.Row>\r\n                  <Col>\r\n                    <Form.Group>\r\n                      <Form.Label>Email do Usuário</Form.Label>\r\n                      <Form.Control type=\"email\" placeholder=\"Insira o email do usuário\" name=\"email_recuperacao\" value={this.state.email_recuperacao || \"\"} onChange={this.handleChange} required />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        Insira o email do usuário que deseja recuperar a senha\r\n                      </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Form.Row>\r\n\r\n                <Button variant=\"danger\" type=\"submit\" block>\r\n                  Recuperar\r\n                </Button>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => this.openFormRecSenha(!this.state.openFormRecSenhaAction)}>\r\n                Fechar\r\n            </Button>\r\n\r\n            </Modal.Footer>\r\n          </Modal>\r\n    \r\n        </>\r\n      );\r\n    }\r\n \r\n     \r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './style.css'\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nclass PageLoading extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"loading__centered\" >\r\n                    <div className=\"loading__logo\">\r\n                        <ScaleLoader size={22} color={\"#fafafa\"} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n     \r\n}\r\n\r\n\r\nexport default PageLoading;\r\n\r\n\r\n","import React from 'react';\r\nimport { Redirect  } from \"react-router-dom\";\r\nimport PageLoading from '../../components/PageLoading';\r\nimport './style.css';\r\nimport Config from '../../config';\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      logged: \"loading\"\r\n    };\r\n\r\n    //Configuracoes\r\n    this.config = Config.configs()\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    fetch(this.config.appurl+\"geoportal/logged\", {\r\n      method: 'POST',\r\n      body: JSON.stringify({email:localStorage.getItem('email'), salt:localStorage.getItem('salt')}),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(\r\n      //loading\r\n      this.setState(\r\n        {\r\n          logged: \"loading\"\r\n        }\r\n      )\r\n    )\r\n    .then(\r\n      (response) => {\r\n        if(response.error){\r\n          this.setState(\r\n            {\r\n              logged: \"no\"\r\n            }\r\n          )\r\n          //limpar a sessão\r\n          localStorage.clear();\r\n        }else{\r\n          this.setState(\r\n            {\r\n              logged: \"yes\"\r\n            }\r\n          )\r\n\r\n          //criar mais dados do usuário (Mostrar Nome)\r\n          //localStorage.setItem('nome', response.usuario.nome);\r\n          \r\n        }\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState = (state,callback)=>{\r\n      return;\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if(this.state.logged === \"yes\"){\r\n      \r\n      content = <iframe title=\"GeoITBI\" frameBorder=\"0\" allowtransparency=\"yes\" scrolling=\"no\" src=\"/webapp/index.html\" width=\"100%\" height=\"100%\"></iframe>;\r\n\r\n    }else if(this.state.logged === \"loading\"){\r\n      content = <PageLoading />;\r\n    }else{\r\n      content = <Redirect push to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n      </>\r\n    );\r\n    \r\n\r\n  }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nexport default function Dashboard() {\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n          <Navbar.Brand href=\"/\">\r\n            <img \r\n              src=\"/logo.png\" \r\n              alt=\"Logo PMSJR\"\r\n              width=\"32\"\r\n              height=\"42\"\r\n              className=\"d-inline-block align-center\"\r\n            />\r\n            {' '}\r\n            Geoportal de ITBI | 404 Ops Página não encontrada..\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport LoginPage from './pages/Login';\r\nimport DashboardPage from './pages/Dashboard';\r\nimport NotFoundPage from './pages/NotFound';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route component={LoginPage} exact path=\"/\" />\r\n        <Route component={DashboardPage} exact path=\"/app\" />\r\n        <Route component={NotFoundPage} exact={true} path=\"*\" />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../src/static/css/global.css';\n\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Routes from './Routes';\n\nconst browserHistory = createBrowserHistory();\n\nfunction App() {\n  return (\n   <>\n      <Router history={browserHistory}>\n          <Routes />\n      </Router>\n    {/*<EsriMap />*/}\n   </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}